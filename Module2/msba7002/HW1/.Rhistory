## final result
print("90% Confidence Interval for population mean:", lower_bound, "to", upper_bound, "\n")
# 1.(a)
## data
n <- 45  # Sample size
x_mean <- 920
sigma <- 36  # Population standard deviation
z <- 1.645  # Z-value for 90% confidence level
lower_bound <- x_mean - z*(sigma/sqrt(n))
upper_bound <- x_mean + z*(sigma/sqrt(n))
## final result
print("90% Confidence Interval for population mean:", lower_bound, "to", upper_bound, "\n")
# 1.(a)
## data
n <- 45  # Sample size
x_mean <- 920
sigma <- 36  # Population standard deviation
z <- 1.645  # Z-value for 90% confidence level
lower_bound <- x_mean - z*(sigma/sqrt(n))
upper_bound <- x_mean + z*(sigma/sqrt(n))
## final result
cat("90% Confidence Interval for population mean:", lower_bound, "to", upper_bound, "\n")
# 1.(a)
## data
n <- 45  # Sample size
x_mean <- 920
sigma <- 36  # Population standard deviation
z <- 1.645  # Z-value for 90% confidence level
lower_bound <- x_mean - z*(sigma/sqrt(n))
upper_bound <- x_mean + z*(sigma/sqrt(n))
## final result
cat("90% Confidence Interval for population mean:", lower_bound, "to", upper_bound, "\n")
# 1.(b)
## data
n <- 60
x_bar <- 120
sigma <- 32
z_90 <- 1.645
z_95 <- 1.96
z_99 <- 2.576
### i.
margin_of_error_90 <- z_90 * (sigma / sqrt(n))
lower_bound_90 <- x_bar - margin_of_error_90
upper_bound_90 <- x_bar + margin_of_error_90
cat("90% Confidence Interval:", lower_bound_90, "to", upper_bound_90, "\n")
### ii.
margin_of_error_95 <- z_95 * (sigma / sqrt(n))
lower_bound_95 <- x_bar - margin_of_error_95
upper_bound_95 <- x_bar + margin_of_error_95
cat("95% Confidence Interval:", lower_bound_95, "to", upper_bound_95, "\n")
### iii.
margin_of_error_99 <- z_99 * (sigma / sqrt(n))
lower_bound_99 <- x_bar - margin_of_error_99
upper_bound_99 <- x_bar + margin_of_error_99
cat("99% Confidence Interval:", lower_bound_99, "to", upper_bound_99, "\n")
### iv.
---
title: "HW1"
# data
n <- 260
x_mean <- 42.6
sigma <- 5
u <- 42
# Z test
z <- (x_mean - u) / (sigma / sqrt(n))
p_value <- 1 - pnorm(z)
cat(p_value)
ProdTime <- read.csv("ProdTime.dat")
ProdTime <- read.dat("ProdTime.dat")
ProdTime <- read.table("ProdTime.dat")
ProdTime <- read.table(".\ProdTime.dat")
ProdTime <- read.table("C:\Users\15635\OneDrive\hku\Module2\msba7002\HW1\ProdTime.dat")
ProdTime <- read.csv("ProdTime.dat")
ProdTime <- read.csv(".\ProdTime.dat")
ProdTime <- read.csv("./ProdTime.dat")
cd
pwd
ProdTime <- read.csv("ProdTime.dat")
ProdTime <- read.csv("ProdTime.dat")
ProdTime <- read.csv("ProdTime.dat")
getwd()
setwd("C:\Users\15635\OneDrive\hku\Module2\msba7002\HW1")
setwd("C:/Users/15635/OneDrive/hku/Module2/msba7002/HW1")
ProdTime <- read.csv("ProdTime.dat")
head(ProdTime)
reg <- lm(Time ~ RunSize + Manager, data = ProdTime)
reg <- lm(Time ~ RunSize + Manager, data = data)
head(data)
data <- read.csv("ProdTime.dat")
head(data)
reg <- lm(Time ~ RunSize + Manager, data = data)
reg <- lm(Time.for.Run ~ Run.Size + Manager, data = data)
summary(reg)
reg_int <- lm(Time.for.Run ~ Run.Size*Manager,data = data)
summary(reg_int)
## (a)
library(ISLR)
## (a)
# 安装 ISLR 包
install.packages("ISLR")
# 安装 ISLR2 包
install.packages("ISLR2")
## (a)
library(ISLR)
library(ISLR2)
## (a)
library(ISLR)
library(ISLR2)
?ISLR::Auto
library(ISLR)
library(ISLR2)
d = data("Auto")
summary(Auto)
library(ISLR)
library(ISLR2)
d = data("Auto")
summary(d)
library(ISLR)
library(ISLR2)
data("Auto")
summary(d)
library(ISLR)
library(ISLR2)
data("Auto")
summary(Auto)
data("Auto")
summary(Auto)
pairs(Auto)
pairs(Auto)
model1 <- lm(mpg ~ year, data = Auto)
summary(model1)
model2 <- lm(mpg ~ year + horsepower, data = Auto)
summary(model2)
par(mfrow=c(2,2))
plot(model2)
g ~ year * horsepower)
model3 <- lm(mpg ~ year * horsepower)
model3 <- lm(mpg ~ year * horsepower, data = Auto)
summary(model3)
summary(Auto)
pairs(Auto)
summary(model3)
model_continuous <- lm(mpg ~ horsepower + cylinders, data = Auto)
summary(model_continuous)
model_categorical <- lm(mpg ~ horsepower + as.factor(cylinders), data = ISLR::Auto)
summary(model_categorical)
adjusted_r_squared_continuous <- summary(model_continuous)$adj.r.squared
adjusted_r_squared_categorical <- summary(model_categorical)$adj.r.squared
cat("Adjusted R-squared (Continuous):", adjusted_r_squared_continuous, "\n")
cat("Adjusted R-squared (Categorical):", adjusted_r_squared_categorical, "\n")
library(leaps)
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8, method = "exhaustive")
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8, method = "exhaustive")
library(ISLR)
library(leaps)
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8, method = "exhaustive")
library(ISLR)
library(leaps)
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8, method = "forward")
summary(subset_selection)
library(ISLR)
library(leaps)
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8, method = "forward")
summary(model_all)
best_adjr2_model <- which.max(summary(model_all)$adjr2)
best_cp_model <- which.min(summary(model_all)$cp)
best_bic_model <- which.min(summary(model_all)$bic)
predictors_adjr2 <- names(coef(model_all, best_adjr2_model))
predictors_cp <- names(coef(model_all, best_cp_model))
predictors_bic <- names(coef(model_all, best_bic_model))
predictors_adjr2
predictors_cp
predictors_bic
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8, method = "backward")
summary(model_all)
best_adjr2_model <- which.max(summary(model_all)$adjr2)
best_cp_model <- which.min(summary(model_all)$cp)
best_bic_model <- which.min(summary(model_all)$bic)
predictors_adjr2 <- names(coef(model_all, best_adjr2_model))
predictors_cp <- names(coef(model_all, best_cp_model))
predictors_bic <- names(coef(model_all, best_bic_model))
predictors_adjr2
predictors_cp
predictors_bic
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8)
library(ISLR)
library(leaps)
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8,force.in = force.in)
library(ISLR)
library(leaps)
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8, force.in = TRUE)
library(ISLR)
library(leaps)
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8)
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8)
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8, method = "forward")
summary(model_all)
best_adjr2_model <- which.max(summary(model_all)$adjr2)
best_cp_model <- which.min(summary(model_all)$cp)
best_bic_model <- which.min(summary(model_all)$bic)
cat("Best model based on Adjusted R^2:", best_adjr2_model, "\n")
cat("Best model based on Mallow's Cp:", best_cp_model, "\n")
cat("Best model based on BIC:", best_bic_model, "\n")
best_model_adj_r_squared <- lm(mpg ~ ., data = Auto, subset = which(subset_selection$which[best_adj_r_squared_model, ]))
best_model_adj_r_squared <- lm(mpg ~ ., data = Auto, subset = which(model_all$which[best_adj_r_squared_model, ]))
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8, method = "forward")
summary(model_all)
best_adjr2_model <- which.max(summary(model_all)$adjr2)
best_cp_model <- which.min(summary(model_all)$cp)
best_bic_model <- which.min(summary(model_all)$bic)
cat("Best model based on Adjusted R^2:", best_adjr2_model, "\n")
cat("Best model based on Mallow's Cp:", best_cp_model, "\n")
cat("Best model based on BIC:", best_bic_model, "\n")
best_model_adjr2 <- lm(mpg ~ ., data = Auto, subset = which(model_all$which[best_adjr2_model, ]))
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8, method = "forward")
summary(model_all)
best_adjr2_model <- which.max(summary(model_all)$adjr2)
best_cp_model <- which.min(summary(model_all)$cp)
best_bic_model <- which.min(summary(model_all)$bic)
cat("Best model based on Adjusted R^2:", best_adjr2_model, "\n")
cat("Best model based on Mallow's Cp:", best_cp_model, "\n")
cat("Best model based on BIC:", best_bic_model, "\n")
best_model_adjr2 <- lm(mpg ~ ., data = Auto, subset = which(model_all$which[best_adjr2_model, ]))
coef(model_all, best_adjr2_model)
lm(model_all, best_adjr2_model)
model_all <- regsubsets(mpg ~ ., data = Auto, nvmax = 8, method = "forward")
summary(model_all)
best_adjr2_model <- which.max(summary(model_all)$adjr2)
best_cp_model <- which.min(summary(model_all)$cp)
best_bic_model <- which.min(summary(model_all)$bic)
cat("Best model based on Adjusted R^2:", best_adjr2_model, "\n")
cat("Best model based on Mallow's Cp:", best_cp_model, "\n")
cat("Best model based on BIC:", best_bic_model, "\n")
best_vars_adjr2 <- names(coef(model_all, best_adjr2_model))
best_formula_adjr2 <- as.formula(paste("mpg ~", paste(best_vars_adjr2, collapse = " + ")))
library(ISLR)
library(leaps)
model_all <- regsubsets(mpg ~ . , data = Auto, nvmax = 8, method = "forward")
summary(model_all)
best_adjr2_model <- which.max(summary(model_all)$adjr2)
best_cp_model <- which.min(summary(model_all)$cp)
best_bic_model <- which.min(summary(model_all)$bic)
cat("Best model based on Adjusted R^2:", best_adjr2_model, "\n")
cat("Best model based on Mallow's Cp:", best_cp_model, "\n")
cat("Best model based on BIC:", best_bic_model, "\n")
best_vars_adjr2 <- names(coef(model_all, best_adjr2_model))
best_formula_adjr2 <- as.formula(paste("mpg ~", paste(best_vars_adjr2, collapse = " + ")))
library(ISLR)
library(leaps)
model_all <- regsubsets(mpg ~ . , data = Auto, nvmax = 8, method = "forward")
summary(model_all)
best_adjr2_model <- which.max(summary(model_all)$adjr2)
best_cp_model <- which.min(summary(model_all)$cp)
best_bic_model <- which.min(summary(model_all)$bic)
summary(Auto)
Auto$name <- as.factor(Auto$name)
model_all <- regsubsets(mpg ~ . , data = Auto, nvmax = 8, method = "forward")
summary(model_all)
summary(Auto)
Auto$name <- as.factor(Auto$name)
model_all <- regsubsets(mpg ~ . , data = Auto, nvmax = 8, method = "forward")
summary(model_all)
best_adjr2_model <- which.max(summary(model_all)$adjr2)
best_cp_model <- which.min(summary(model_all)$cp)
best_bic_model <- which.min(summary(model_all)$bic)
predictors_adjr2 <- names(coef(model_all, best_adjr2_model))
predictors_cp <- names(coef(model_all, best_cp_model))
predictors_bic <- names(coef(model_all, best_bic_model))
predictors_adjr2
predictors_cp
predictors_bic
summary(Auto)
Auto$name <- NULL
model_all <- regsubsets(mpg ~ . , data = Auto, nvmax = 7, method = "forward")
summary(model_all)
best_adjr2_model <- which.max(summary(model_all)$adjr2)
best_cp_model <- which.min(summary(model_all)$cp)
best_bic_model <- which.min(summary(model_all)$bic)
predictors_adjr2 <- names(coef(model_all, best_adjr2_model))
predictors_cp <- names(coef(model_all, best_cp_model))
predictors_bic <- names(coef(model_all, best_bic_model))
predictors_adjr2
predictors_cp
predictors_bic
summary(Auto)
Auto$name <- NULL
model_all <- regsubsets(mpg ~ . , data = Auto, nvmax = 7, method = "forward")
summary(model_all)
best_adjr2_model <- which.max(summary(model_all)$adjr2)
best_cp_model <- which.min(summary(model_all)$cp)
best_bic_model <- which.min(summary(model_all)$bic)
predictors_adjr2 <- names(coef(model_all, best_adjr2_model))
predictors_cp <- names(coef(model_all, best_cp_model))
predictors_bic <- names(coef(model_all, best_bic_model))
predictors_adjr2
predictors_cp
predictors_bic
formula_adjr2 <- as.formula(paste("mpg ~", paste(predictors_adjr2[-1], collapse = " + ")))
model_adjr2 <- lm(formula_adjr2, data = Auto)
summary(model_adjr2)
formula_cp <- as.formula(paste("mpg ~", paste(predictors_cp[-1], collapse = " + ")))
model_cp <- lm(formula_cp, data = Auto)
summary(model_cp)
formula_bic <- as.formula(paste("mpg ~", paste(predictors_bic[-1], collapse = " + ")))
model_bic <- lm(formula_bic, data = Auto)
summary(model_bic)
library(ISLR)
library(leaps)
summary(Auto)
Auto$name <- NULL
model_all <- regsubsets(mpg ~ . , data = Auto, nvmax = 7, method = "exhaustive")
summary(model_all)
best_adjr2_model <- which.max(summary(model_all)$adjr2)
best_cp_model <- which.min(summary(model_all)$cp)
best_bic_model <- which.min(summary(model_all)$bic)
predictors_adjr2 <- names(coef(model_all, best_adjr2_model))
predictors_cp <- names(coef(model_all, best_cp_model))
predictors_bic <- names(coef(model_all, best_bic_model))
predictors_adjr2
predictors_cp
predictors_bic
formula_adjr2 <- as.formula(paste("mpg ~", paste(predictors_adjr2[-1], collapse = " + ")))
model_adjr2 <- lm(formula_adjr2, data = Auto)
summary(model_adjr2)
formula_cp <- as.formula(paste("mpg ~", paste(predictors_cp[-1], collapse = " + ")))
model_cp <- lm(formula_cp, data = Auto)
summary(model_cp)
formula_bic <- as.formula(paste("mpg ~", paste(predictors_bic[-1], collapse = " + ")))
model_bic <- lm(formula_bic, data = Auto)
summary(model_bic)
